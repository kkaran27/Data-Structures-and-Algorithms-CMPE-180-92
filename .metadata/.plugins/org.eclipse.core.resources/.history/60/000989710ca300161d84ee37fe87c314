/*
 * Person.cpp
 *
 *  Created on: Nov 2, 2016
 *      Author: Karan
 */
#include <iostream>
#include <string>
#include <vector>
#include "Person.h"
using namespace std;

/***** Write the constructors. *****/
Person::Person()
{

}
Person::Person(int level, string name)
{
	this->level = level;
	this->name = name;
	this->spouse_name = "";
	this->parent = nullptr;
}
Person::Person(int level, string name, string spouse)
{
	this->level = level;
	this->name = name;
	this->spouse_name = spouse;
	this->parent = nullptr;
}
/**
 * Destructor
 */
Person::~Person()
{
    /***** Complete this destructor: Recursively delete all the nodes. *****/
	if(this->parent != nullptr)
	{
		//vector<Person*>::iterator it;
		//it = this->parent->children.begin();
		this->parent->children.erase(this->parent->children.begin());
	}
}

/**
 * Have a child.
 * @param child pointer to the new child.
 */
void Person::have_child(Person *child)
{
    /***** Complete this member function. *****/
	this->children.push_back(child);
	child->parent = this;
}

/**
 * Print a person.
 */
void Person::print() const
{
    /***** Complete this member function: Recursively print the nodes. *****/
	cout << this->name;
	if(this->spouse_name != "")
	{
		cout << std::string() + " " + '(' + this->spouse_name + ')' << endl;
	}
	else
	{
		cout << endl;
	}
	for(Person* p:children)
	{
		print_bar();
		p->print();
	}

	/*this->print_bar();
	//this->print_bar();
	if(!this->children.empty())
	{
		//print_bar();
		cout << endl;
			for(int i = 2; i <= this->children[0]->level; i++)
			{
				cout << "|";
				cout << "   ";
			}
			cout << "+---";
		this->children[0]->print();
	}
	else
	{
		delete this;
		if(!this->parent->children.empty())
		{
			//print_bar();
			cout << endl;
				for(int i = 2; i <= this->parent->children[0]->level; i++)
				{
					cout << "|";
					cout << "   ";
				}
				cout << "+---";
			this->parent->children[0]->print();
		}
		else
		{
			delete this->parent;
			if(!this->parent->parent->children.empty())
			{
				//print_bar();
				cout << endl;
					for(int i = 2; i <= this->parent->parent->children[0]->level; i++)
					{
						cout << "|";
						cout << "   ";
					}
					cout << "+---";
				this->parent->parent->children[0]->print();
			}
		}
	}*/
}

/**
 * Print the vertical bar.
 */
void Person::print_bar() const
{
    /***** Complete this member function: Recursively print vertical bars. *****/
		//cout << "|";
		//cout << "    ";
	for(int i=0; i <= this->level; i++)
	{
		cout<<"|" << "   ";
	}
	/*if (this->level == 0) {
		cout << "|";
	} else if (this->level == 1) {
		if (this->parent->children.size() > 1) {
			parent->print_bar();
			cout << "   " << "|";
		} else {
			cout << "    " << "|";
		}
	} else if (this->level == 2) {
		parent->print_bar();
		if ((!this->children.empty()))
			cout << "   " << "|";
	}*/
		/*if(this->parent->parent != nullptr)
		{
			cout << "|" << "   " << "|" << "   "<< "|";
		}
		if(this->parent->parent->parent != nullptr)
		{
			cout << "|" << "   " << "|" << "   " << "|" << "   ";
		}*/

}

/*void Person::print_plus() const
{
    //**** Complete this member function: Recursively print vertical bars. ****
	cout << endl;
	for(int i = 2; i <= this->children[0]->level; i++)
	{
		cout << "|";
		cout << "   ";
	}
	cout << "+---";
}*/




